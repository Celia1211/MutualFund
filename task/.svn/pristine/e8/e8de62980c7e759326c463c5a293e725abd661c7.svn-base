package filter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

import org.springframework.util.StringUtils;

import exception.UnauthorizedAccessException;
import model.Customer;
import model.Employee;
import model.User;

/**
 * @author wyen Wei-Yu Yen. 12,02,2015 08-672
 */
public class SecurityFilter implements Filter {

    private List<String> customerAuthorizedUrl = new ArrayList<>();

    private List<String> employeeAuthorizedUrl = new ArrayList<>();

    private List<String> allAuthorizedUrl = new ArrayList<>();

    /*
     * (non-Javadoc)
     * @see javax.servlet.Filter#init(javax.servlet.FilterConfig)
     */
    @Override
    public void init(FilterConfig arg0) throws ServletException {
        allAuthorizedUrl.add("resources");
        allAuthorizedUrl.add("tologin");
        allAuthorizedUrl.add("login");
        allAuthorizedUrl.add("logout");

        customerAuthorizedUrl.add("tofunddetl");
        customerAuthorizedUrl.add("tobuyfund");
        customerAuthorizedUrl.add("tosellfund");
        customerAuthorizedUrl.add("toresearchfund");
        customerAuthorizedUrl.add("buyfund");
        customerAuthorizedUrl.add("sellfund");
        customerAuthorizedUrl.add("requestcheck");
        customerAuthorizedUrl.add("toviewacct");
        customerAuthorizedUrl.add("fundpricehistory");
        customerAuthorizedUrl.add("researchFund");
        customerAuthorizedUrl.add("custchangepassword");

        employeeAuthorizedUrl.add("tocreateemp");
        employeeAuthorizedUrl.add("tocreatecust");
        employeeAuthorizedUrl.add("tocreatefund");
        employeeAuthorizedUrl.add("toviewcust");
        employeeAuthorizedUrl.add("toviewcustlist");
        employeeAuthorizedUrl.add("totransiday");
        employeeAuthorizedUrl.add("tochgpwd");
        employeeAuthorizedUrl.add("transit");
        employeeAuthorizedUrl.add("createEmployee");
        employeeAuthorizedUrl.add("createFund");
        employeeAuthorizedUrl.add("createCustomer");
        employeeAuthorizedUrl.add("depositCheck");
        employeeAuthorizedUrl.add("resetCustPassword");
        employeeAuthorizedUrl.add("viewCustomer");
        employeeAuthorizedUrl.add("researchCustomer");
        employeeAuthorizedUrl.add("changepassword");
    }

    /*
     * (non-Javadoc)
     * @see javax.servlet.Filter#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse,
     * javax.servlet.FilterChain)
     */
    @Override
    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest request = (HttpServletRequest) req;
        String uri = request.getRequestURI();
        uri = uri.substring(6);
        System.out.println(uri);
        if (!StringUtils.isEmpty(uri) && !isAuthorized(allAuthorizedUrl, uri)) {
            User user = (User) request.getSession().getAttribute("user");
            if (user == null) {
                request.getRequestDispatcher("/").forward(req, resp);
                return;
            } else {
                if ((user instanceof Customer && !isAuthorized(customerAuthorizedUrl, uri))
                        || (user instanceof Employee && !isAuthorized(employeeAuthorizedUrl, uri))) {
                    throw new UnauthorizedAccessException();
                }
            }
        }

        chain.doFilter(req, resp);
    }

    /*
     * (non-Javadoc)
     * @see javax.servlet.Filter#destroy()
     */
    @Override
    public void destroy() {
        return;
    }

    private boolean isAuthorized(List<String> authorizedList, String uri) {
        for (String authUri : authorizedList) {
            if (uri.startsWith(authUri)) {
                return true;
            }
        }
        return false;
    }
}
