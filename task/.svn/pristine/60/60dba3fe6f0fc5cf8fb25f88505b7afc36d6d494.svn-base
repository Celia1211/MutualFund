package util;

import java.security.MessageDigest;
import java.util.List;

import com.mysql.jdbc.StringUtils;

/**
 * @author wyen Wei-Yu Yen.
 */
public final class Utils {
    private Utils() {

    }

    public static void checkRequiredField(String value, String fieldName, List<String> errorMsgs) {
        if (StringUtils.isEmptyOrWhitespaceOnly(value)) {
            errorMsgs.add(fieldName + " is required");
        }
    }

    public static void checkNewPassword(String password, String confirmPassword, List<String> errorMsgs) {
        if (!StringUtils.isEmptyOrWhitespaceOnly(password) && password.length() < 6) {
            errorMsgs.add("The length of password should be at least 6!");
            return;
        }

        if (!password.equals(confirmPassword)) {
            errorMsgs.add("Password and Confirm Password are not consistent!");
            return;
        }
    }

    public static void checkPasswordAuth(String pass, String passInDb, List<String> errorMsgs) {
        if (!pass.equals(passInDb)) {
            errorMsgs.add("Password is incorrect");
        }
    }

    public static void changePasswordCheck(String pass, String passInDb, String newPass, String confirmPass,
            List<String> errorMsgs) {

        checkPasswordAuth(pass, passInDb, errorMsgs);
        checkNewPassword(newPass, confirmPass, errorMsgs);
    }

    public static String md5(String str) {
        String md5 = null;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] barr = md.digest(str.getBytes()); // 將 byte 陣列加密
            StringBuffer sb = new StringBuffer(); // 將 byte 陣列轉成 16 進制
            for (int i = 0; i < barr.length; i++) {
                sb.append(byte2Hex(barr[i]));
            }
            String hex = sb.toString();
            md5 = hex.toUpperCase(); // 一律轉成大寫
        } catch (Exception e) {
            e.printStackTrace();
        }
        return md5;
    }

    private static String byte2Hex(byte b) {
        String[] h = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" };
        int i = b;
        if (i < 0) {
            i += 256;
        }
        return h[i / 16] + h[i % 16];
    }

}
