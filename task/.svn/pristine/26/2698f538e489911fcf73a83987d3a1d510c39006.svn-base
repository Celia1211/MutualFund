package controller;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.Date;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;

import org.easymock.EasyMock;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import dao.EmployeeDao;
import dao.FundPriceHistoryDao;
import dao.TransactionDao;
import model.FundPriceHistory;
import model.FundPriceHistoryPK;
import model.Transaction;

/**
 * @author wyen Wei-Yu Yen.
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/application-context.xml" })
@Rollback
@Transactional
public class EmployeeControllerTest {
    @Autowired
    private EmployeeController employeeController;

    @Autowired
    private EmployeeDao employeeDao;

    @Autowired
    private TransactionDao transactionDao;

    @Autowired
    private FundPriceHistoryDao fundPriceHistoryDao;

    @Test
    public void testCreateEmployee() {
        HttpServletRequest req = EasyMock.createMock(HttpServletRequest.class);
        employeeController.createEmployee("junittester@andrew.cmu.edu", "Xinyan", "Liu", req);
        assertNotNull(employeeDao.findByColumn("username", "junittester@andrew.cmu.edu"));
    }

    @Test
    public void testFindCurPriceByFundId() {
        final Long fundId = 99999L;

        assertNull(fundPriceHistoryDao.findCurPriceByFundId(fundId));

        FundPriceHistory entity = new FundPriceHistory();
        entity.setId(new FundPriceHistoryPK(fundId, new Date()));
        entity.setPrice(20L);
        fundPriceHistoryDao.save(entity);

        assertEquals("20", fundPriceHistoryDao.findCurPriceByFundId(fundId).toString());

        entity = new FundPriceHistory();
        entity.setId(new FundPriceHistoryPK(fundId, new Date(new Date().getTime() + 86400000)));
        entity.setPrice(30L);
        fundPriceHistoryDao.save(entity);

        assertEquals("30", fundPriceHistoryDao.findCurPriceByFundId(fundId).toString());
    }

    @Test
    public void testFindLastTransactionByCustId() {
        assertNull(transactionDao.findLastTransactionByCustId(31L));
        Transaction trans = transactionDao.findByCustomerId(31L).get(0);
        trans.setExecuteDate(new Date());
        assertNotNull(transactionDao.findLastTransactionByCustId(31L));
    }

    @Test
    public void testMail() {
        final String username = "cmuteam13@gmail.com";
        final String password = "awesometeam13";

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        try {

            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress("from-email@gmail.com"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse("marjoriehmz@gmail.com"));
            message.setSubject("Testing Subject");
            message.setText("Dear Mail Crawler," + "\n\n No spam to my email, please!");

            Transport.send(message);

            System.out.println("Done");

        } catch (MessagingException e) {
            throw new RuntimeException(e);
        }
    }
}
