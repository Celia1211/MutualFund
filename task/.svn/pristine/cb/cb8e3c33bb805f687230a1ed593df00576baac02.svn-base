package controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import dao.CustomerDao;
import dao.EmployeeDao;
import dao.FundDao;
import dao.TransactionDao;
import model.Customer;
import model.Fund;
import model.Transaction;
import util.Constants.TransactionStatus;
import util.Constants.TransactionType;
import util.Utils;

/**
 * @author wyen Wei-Yu Yen.
 */
@Controller
@Transactional
public class CustomerController {

    @Autowired
    private CustomerDao customerDao;

    @Autowired
    private EmployeeDao employeeDao;

    @Autowired
    private FundDao fundDao;

    @Autowired
    private TransactionDao tranDao;

    @RequestMapping(path = "createCustomer", method = RequestMethod.POST)
    public String createCustomer(@RequestParam("userName") String userName, @RequestParam("firstName") String firstName,
            @RequestParam("lastName") String lastName, @RequestParam("password") String password,
            @RequestParam("confirmPass") String confirmPass, @RequestParam("Addr1") String addr1,
            @RequestParam("Addr2") String addr2, @RequestParam("state") String state, @RequestParam("city") String city,
            @RequestParam("zip") String zip, HttpServletRequest request) {

        List<String> errorMsgs = new ArrayList<>();
        request.setAttribute("errorMsgs", errorMsgs);

        Utils.checkRequiredField(userName, "User Name", errorMsgs);
        Utils.checkRequiredField(firstName, "First Name", errorMsgs);
        Utils.checkRequiredField(lastName, "Last Name", errorMsgs);
        Utils.checkRequiredField(password, "Password", errorMsgs);
        Utils.checkRequiredField(confirmPass, "Confirm Password", errorMsgs);
        Utils.checkRequiredField(addr1, "Address Line 1", errorMsgs);
        Utils.checkRequiredField(state, "state", errorMsgs);
        Utils.checkRequiredField(city, "city", errorMsgs);
        Utils.checkRequiredField(zip, "zip", errorMsgs);

        if (employeeDao.findByColumn("username", userName) != null
                || customerDao.findByColumn("username", userName) != null) {
            errorMsgs.add("User Name exists!");
        }

        Utils.checkNewPassword(password, confirmPass, errorMsgs);

        if (!errorMsgs.isEmpty()) {
            return "create-customer";
        }

        Customer customer = new Customer();
        customer.setUsername(userName);
        customer.setFirstname(firstName);
        customer.setLastname(lastName);
        customer.setPassword(Utils.md5(password));
        customer.setAddrLine1(addr1);
        customer.setAddrLine2(addr2);
        customer.setState(state);
        customer.setCity(city);
        customer.setZip(zip);

        customerDao.save(customer);

        return "create-customer";
    }

    @RequestMapping(path = "buyFund", method = RequestMethod.POST)
    public String buyFund(@RequestParam("fundName") String fundName, @RequestParam("fundTicker") String fundTicker,
            @RequestParam("totalAmount") String totalAmount, HttpServletRequest request) {
        List<String> errorMsgs = new ArrayList<>();
        request.setAttribute("errorMsgs", errorMsgs);

        Fund fund = fundDao.findByNameAndSymbol(fundName, fundTicker);
        Utils.checkLongInputStr(totalAmount, "Total amount to spend", errorMsgs);
        if (fund == null) {
            errorMsgs.add("Fund not found");
        }

        if (!errorMsgs.isEmpty()) {
            return "buyfund";
        }

        // TODO check user account cannot be negative
        Customer customer = (Customer) request.getSession().getAttribute("user");

        Transaction tran = new Transaction();
        tran.setAmount(Long.valueOf(totalAmount));
        tran.setCustomerId(customer.getId());
        tran.setFund(fund);
        tran.setOrderDate(new Date());
        tran.setStatus(TransactionStatus.PENDING);
        tran.setTransactionType(TransactionType.BUY);

        tranDao.save(tran);

        return "buyfund";
    }

    @RequestMapping(path = "sellFund", method = RequestMethod.POST)
    public String sellFund(@RequestParam("fundName") String fundName, @RequestParam("fundTicker") String fundTicker,
            @RequestParam("shareNumber") String shareNumber, HttpServletRequest request) {
        List<String> errorMsgs = new ArrayList<>();
        request.setAttribute("errorMsgs", errorMsgs);

        Fund fund = fundDao.findByNameAndSymbol(fundName, fundTicker);
        Utils.checkLongInputStr(shareNumber, "Share number to sell", errorMsgs);
        if (fund == null) {
            errorMsgs.add("Fund not found");
        }

        if (!errorMsgs.isEmpty()) {
            return "sellfund";
        }

        // TODO check share cannot be negative
        Customer customer = (Customer) request.getSession().getAttribute("user");

        Transaction tran = new Transaction();
        tran.setShares(Long.valueOf(shareNumber));
        tran.setCustomerId(customer.getId());
        tran.setFund(fund);
        tran.setOrderDate(new Date());
        tran.setStatus(TransactionStatus.PENDING);
        tran.setTransactionType(TransactionType.SELL);

        tranDao.save(tran);

        return "sellfund";
    }

    @RequestMapping(path = "requestcheck", method = RequestMethod.POST)
    public String requestCheck(@RequestParam("checkNumber") String checkNumber, HttpServletRequest request) {
        List<String> errorMsgs = new ArrayList<>();
        request.setAttribute("errorMsgs", errorMsgs);

        Utils.checkLongInputStr(checkNumber, "Check Number", errorMsgs);
        if (!errorMsgs.isEmpty()) {
            return "viewaccount";
        }

        // TODO check number cannot cause balance negative
        Customer customer = (Customer) request.getSession().getAttribute("user");

        Transaction tran = new Transaction();
        tran.setCustomerId(customer.getId());
        tran.setOrderDate(new Date());
        tran.setStatus(TransactionStatus.PENDING);
        tran.setTransactionType(TransactionType.REQUEST_CHECK);
        tran.setAmount(Long.valueOf(checkNumber));

        tranDao.save(tran);

        return "viewaccount";
    }
}
