package util;

import java.security.MessageDigest;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Random;

import org.springframework.util.StringUtils;

/**
 * @Prime13 Consultants
 */
public final class Utils {
    private Utils() {

    }

    public static void checkRequiredField(String value, String fieldName, List<String> errorMsgs) {
        if (StringUtils.isEmpty(value)) {
            errorMsgs.add(fieldName + " is required");
        }
    }

    public static void checkNewPassword(String password, String confirmPassword, List<String> errorMsgs) {
        if (StringUtils.isEmpty(password) || password.length() < 6) {
            errorMsgs.add("The length of password should be at least 6!");
            return;
        }

        if (!password.equals(confirmPassword)) {
            errorMsgs.add("Password and Confirm Password are not consistent!");
            return;
        }
    }

    public static void checkPasswordAuth(String pass, String passInDb, List<String> errorMsgs) {
        if (!md5(pass).equals(passInDb)) {
            errorMsgs.add("Password is incorrect");
        }
    }

    public static void changePasswordCheck(String pass, String passInDb, String newPass, String confirmPass,
            List<String> errorMsgs) {
        checkRequiredField(pass, "Password", errorMsgs);
        if (!errorMsgs.isEmpty()) {
            return;
        }
        checkPasswordAuth(pass, passInDb, errorMsgs);
        checkNewPassword(newPass, confirmPass, errorMsgs);
    }

    public static String md5(String str) {
        String md5 = null;
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] barr = md.digest(str.getBytes()); // 將 byte 陣列加密
            StringBuffer sb = new StringBuffer(); // 將 byte 陣列轉成 16 進制
            for (int i = 0; i < barr.length; i++) {
                sb.append(byte2Hex(barr[i]));
            }
            String hex = sb.toString();
            md5 = hex.toUpperCase(); // 一律轉成大寫
        } catch (Exception e) {
            e.printStackTrace();
        }
        return md5;
    }

    private static String byte2Hex(byte b) {
        String[] h = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" };
        int i = b;
        if (i < 0) {
            i += 256;
        }
        return h[i / 16] + h[i % 16];
    }

    public static void checkLongInputStr(String input, String fieldName, List<String> errorMsgs) {
        long val = 0L;
        try {
            val = Long.valueOf(input);
        } catch (NumberFormatException e) {
            errorMsgs.add(fieldName + " input is not valid!");
            return;
        }

        if (val <= 0) {
            errorMsgs.add(fieldName + " should be greater than 0");
        }
    }

    private static final String AB = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    private static Random rnd = new Random();

    public static String randomPassword(int len) {
        StringBuilder sb = new StringBuilder(len);
        for (int i = 0; i < len; i++) {
            sb.append(AB.charAt(rnd.nextInt(AB.length())));
        }
        return sb.toString();
    }

    public static void checkMailFormat(String mail, List<String> errorMsgs) {
        if (!mail.matches("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$")) {
            errorMsgs.add("User Name format is invalid! should be XXX@XXX.XXX");
        }
    }

    private static final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");

    public static void checkDateFormta(String[] dates, List<String> errorMsgs) {
        for (String date : dates) {
            if (!StringUtils.isEmpty(date)) {
                try {
                    df.parse(date);
                } catch (ParseException e) {
                    errorMsgs.add("Some of date format are incorrect!");
                    return;
                }
            }
        }
    }

    public static void checkDoubleInputStr(String[] vals, List<String> errorMsgs) {
        for (String val : vals) {
            if (!StringUtils.isEmpty(val)) {
                try {
                    Double.valueOf(val);
                } catch (NumberFormatException e) {
                    errorMsgs.add("Some of price value format are incorrect!");
                    return;
                }
            }
        }
    }

    public static void checkDoubleInputStr(String input, String fieldName, List<String> errorMsgs) {
        Double val = null;
        try {
            val = Double.valueOf(input);
        } catch (NumberFormatException e) {
            errorMsgs.add(fieldName + " input is not valid!");
            return;
        }

        if (val <= 0) {
            errorMsgs.add(fieldName + " should be greater than 0");
        }
    }
}
